[
  {
    "name": "MaxNorm",
    "base": "Constraint",
    "docstring": "MaxNorm weight constraint.\n\n  Constrains the weights incident to each hidden unit\n  to have a norm less than or equal to a desired value.\n\n  Also available via the shortcut function `tf.keras.constraints.max_norm`.\n\n  Arguments:\n    max_value: the maximum norm value for the incoming weights.\n    axis: integer, axis along which to calculate weight norms.\n      For instance, in a `Dense` layer the weight matrix\n      has shape `(input_dim, output_dim)`,\n      set `axis` to `0` to constrain each weight vector\n      of length `(input_dim,)`.\n      In a `Conv2D` layer with `data_format=\"channels_last\"`,\n      the weight tensor has shape\n      `(rows, cols, input_depth, output_depth)`,\n      set `axis` to `[0, 1, 2]`\n      to constrain the weights of each filter tensor of size\n      `(rows, cols, input_depth)`.\n\n  ",
    "arguments": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "max_value",
        "default": 2
      },
      {
        "name": "axis",
        "default": 0
      }
    ],
    "abstract": false,
    "outputs": [],
    "inputs": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "w",
        "default": null
      }
    ],
    "file": "tensorflow/python/keras/constraints.py",
    "aliases": [
      "max_norm"
    ]
  },
  {
    "name": "MinMaxNorm",
    "base": "Constraint",
    "docstring": "MinMaxNorm weight constraint.\n\n  Constrains the weights incident to each hidden unit\n  to have the norm between a lower bound and an upper bound.\n\n  Also available via the shortcut function `tf.keras.constraints.min_max_norm`.\n\n  Arguments:\n    min_value: the minimum norm for the incoming weights.\n    max_value: the maximum norm for the incoming weights.\n    rate: rate for enforcing the constraint: weights will be\n      rescaled to yield\n      `(1 - rate) * norm + rate * norm.clip(min_value, max_value)`.\n      Effectively, this means that rate=1.0 stands for strict\n      enforcement of the constraint, while rate<1.0 means that\n      weights will be rescaled at each step to slowly move\n      towards a value inside the desired interval.\n    axis: integer, axis along which to calculate weight norms.\n      For instance, in a `Dense` layer the weight matrix\n      has shape `(input_dim, output_dim)`,\n      set `axis` to `0` to constrain each weight vector\n      of length `(input_dim,)`.\n      In a `Conv2D` layer with `data_format=\"channels_last\"`,\n      the weight tensor has shape\n      `(rows, cols, input_depth, output_depth)`,\n      set `axis` to `[0, 1, 2]`\n      to constrain the weights of each filter tensor of size\n      `(rows, cols, input_depth)`.\n  ",
    "arguments": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "min_value",
        "default": 0.0
      },
      {
        "name": "max_value",
        "default": 1.0
      },
      {
        "name": "rate",
        "default": 1.0
      },
      {
        "name": "axis",
        "default": 0
      }
    ],
    "abstract": false,
    "outputs": [],
    "inputs": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "w",
        "default": null
      }
    ],
    "file": "tensorflow/python/keras/constraints.py",
    "aliases": [
      "min_max_norm"
    ]
  },
  {
    "name": "NonNeg",
    "base": "Constraint",
    "docstring": "Constrains the weights to be non-negative.\n\n  Also available via the shortcut function `tf.keras.constraints.non_neg`.\n  ",
    "arguments": null,
    "abstract": false,
    "outputs": [],
    "inputs": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "w",
        "default": null
      }
    ],
    "file": "tensorflow/python/keras/constraints.py",
    "aliases": [
      "non_neg"
    ]
  },
  {
    "name": "RadialConstraint",
    "base": "Constraint",
    "docstring": "Constrains `Conv2D` kernel weights to be the same for each radius.\n\n  Also available via the shortcut function\n  `tf.keras.constraints.radial_constraint`.\n\n  For example, the desired output for the following 4-by-4 kernel:\n\n  ```\n      kernel = [[v_00, v_01, v_02, v_03],\n                [v_10, v_11, v_12, v_13],\n                [v_20, v_21, v_22, v_23],\n                [v_30, v_31, v_32, v_33]]\n  ```\n\n  is this::\n\n  ```\n      kernel = [[v_11, v_11, v_11, v_11],\n                [v_11, v_33, v_33, v_11],\n                [v_11, v_33, v_33, v_11],\n                [v_11, v_11, v_11, v_11]]\n  ```\n\n  This constraint can be applied to any `Conv2D` layer version, including\n  `Conv2DTranspose` and `SeparableConv2D`, and with either `\"channels_last\"` or\n  `\"channels_first\"` data format. The method assumes the weight tensor is of\n  shape `(rows, cols, input_depth, output_depth)`.\n  ",
    "arguments": null,
    "abstract": false,
    "outputs": [],
    "inputs": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "w",
        "default": null
      }
    ],
    "file": "tensorflow/python/keras/constraints.py",
    "aliases": [
      "radial_constraint"
    ]
  },
  {
    "name": "UnitNorm",
    "base": "Constraint",
    "docstring": "Constrains the weights incident to each hidden unit to have unit norm.\n\n  Also available via the shortcut function `tf.keras.constraints.unit_norm`.\n\n  Arguments:\n    axis: integer, axis along which to calculate weight norms.\n      For instance, in a `Dense` layer the weight matrix\n      has shape `(input_dim, output_dim)`,\n      set `axis` to `0` to constrain each weight vector\n      of length `(input_dim,)`.\n      In a `Conv2D` layer with `data_format=\"channels_last\"`,\n      the weight tensor has shape\n      `(rows, cols, input_depth, output_depth)`,\n      set `axis` to `[0, 1, 2]`\n      to constrain the weights of each filter tensor of size\n      `(rows, cols, input_depth)`.\n  ",
    "arguments": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "axis",
        "default": 0
      }
    ],
    "abstract": false,
    "outputs": [],
    "inputs": [
      {
        "name": "self",
        "default": null
      },
      {
        "name": "w",
        "default": null
      }
    ],
    "file": "tensorflow/python/keras/constraints.py",
    "aliases": [
      "unit_norm"
    ]
  }
]