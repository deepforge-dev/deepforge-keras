/*globals define*/

/**
 * Generated by RestRouterGenerator 2.2.0 from webgme on Fri May 04 2018 10:11:39 GMT-0500 (CDT).
 * To use in webgme add to gmeConfig.rest.components[KerasAnalysis] = {
 *    mount: 'path/subPath',
 *    src: path.join(process.cwd(), './KerasAnalysis'),
 *    options: {}
 * }
 * If you put this file in the root of your directory the above will expose the routes at
 * <host>/path/subPath, for example GET <host>/path/subPath/getExample will be routed to the getExample below.
 */

'use strict';

// http://expressjs.com/en/guide/routing.html
const Q = require('q');
const path = require('path');
const spawn = require('child_process').spawn;
const express = require('express');
const router = express.Router();

/**
 * Called when the server is created but before it starts to listening to incoming requests.
 * N.B. gmeAuth, safeStorage and workerManager are not ready to use until the start function is called.
 * (However inside an incoming request they are all ensured to have been initialized.)
 *
 * @param {object} middlewareOpts - Passed by the webgme server.
 * @param {GmeConfig} middlewareOpts.gmeConfig - GME config parameters.
 * @param {GmeLogger} middlewareOpts.logger - logger
 * @param {function} middlewareOpts.ensureAuthenticated - Ensures the user is authenticated.
 * @param {function} middlewareOpts.getUserId - If authenticated retrieves the userId from the request.
 * @param {object} middlewareOpts.gmeAuth - Authorization module.
 * @param {object} middlewareOpts.safeStorage - Accesses the storage and emits events (PROJECT_CREATED, COMMIT..).
 * @param {object} middlewareOpts.workerManager - Spawns and keeps track of "worker" sub-processes.
 */
function initialize(middlewareOpts) {
    var logger = middlewareOpts.logger.fork('KerasAnalysis'),
        ensureAuthenticated = middlewareOpts.ensureAuthenticated,
        getUserId = middlewareOpts.getUserId;

    logger.debug('initializing ...');

    // Ensure authenticated can be used only after this rule.
    router.use('*', function (req, res, next) {
        // TODO: set all headers, check rate limit, etc.

        // This header ensures that any failures with authentication won't redirect.
        res.setHeader('X-WebGME-Media-Type', 'webgme.v1');
        next();
    });

    // Use ensureAuthenticated if the routes require authentication. (Can be set explicitly for each route.)
    router.use('*', ensureAuthenticated);

    router.get('/:projectId/:nodeId', function (req, res/*, next*/) {
        // For the first pass, we should just run the plugin and get the results
        // TODO
        const userId = getUserId(req);
        console.log('projectId', req.params.projectId);
        console.log('nodeId', req.params.nodeId);
        // Make sure the user has permission to view the project
        // TODO
        return getTestCode(projectId, nodeId)
            .then(code => executeTestCode(code))
            .then(results => res.json(results));

        //res.json({userId: userId, message: 'get request was handled'});
    });

    logger.debug('ready');
}

function executeTestCode(code) {
    // Run the code and get the results
    // TODO
}

function getTestCode(projectId, nodeId) {
    const deferred = Q.defer();

    const webgmeEnginePath = path.join(__dirname, '..', '..', '..',
        'node_modules', 'webgme-engine');
    const args = [
        path.join(webgmeEnginePath, 'src', 'bin', 'run_plugin.js'),
    ];
    const execPlugin = spawn('node', args);

    // How can I get the test code? stdout? blob?
    // TODO
    execPlugin.on('close', code => {
        if (code === 0) {
            deferred.resolve();
        } else {
            deferred.reject();
        }
    });

    return deferred.promise;
}

/**
 * Called before the server starts listening.
 * @param {function} callback
 */
function start(callback) {
    callback();
}

/**
 * Called after the server stopped listening.
 * @param {function} callback
 */
function stop(callback) {
    callback();
}

module.exports = {
    initialize: initialize,
    router: router,
    start: start,
    stop: stop
};
