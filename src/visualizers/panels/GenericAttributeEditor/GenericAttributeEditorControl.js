/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Nov 17 2017 16:47:39 GMT-0600 (CST).
 */

define([
    'js/Constants',
    'keras/Constants',
    'js/NodePropertyNames'
], function (
    GME_CONCEPTS,
    Constants,
    nodePropertyNames
) {

    'use strict';

    var GenericAttributeEditorControl;

    GenericAttributeEditorControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    };

    GenericAttributeEditorControl.prototype._initWidgetEventHandlers = function () {
        // Set attributes
        // TODO:
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    GenericAttributeEditorControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    GenericAttributeEditorControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            desc;

        if (node) {
            desc = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                attributes: {}
            };

            node.getAttributeNames().forEach(name => {
                var info = node.getAttributeMeta(name);
                info.value = node.getAttribute(name);
                desc.attributes[name] = info;
            });
            var hiddenAttrs = Object.keys(Constants.ATTR).map(key => Constants.ATTR[key]);
            hiddenAttrs.forEach(name => delete desc.attributes[name]);
            delete desc.attributes.name;
        }

        return desc;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    GenericAttributeEditorControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case GME_CONCEPTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case GME_CONCEPTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case GME_CONCEPTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    GenericAttributeEditorControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    GenericAttributeEditorControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    GenericAttributeEditorControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    GenericAttributeEditorControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId !== activeObjectId) {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    GenericAttributeEditorControl.prototype.destroy = function () {
        this._detachClientEventListeners();
    };

    GenericAttributeEditorControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + GME_CONCEPTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    GenericAttributeEditorControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + GME_CONCEPTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    GenericAttributeEditorControl.prototype.onActivate = function () {
        this._attachClientEventListeners();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    GenericAttributeEditorControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
    };

    return GenericAttributeEditorControl;
});
